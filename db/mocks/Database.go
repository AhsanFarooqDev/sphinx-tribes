// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	db "github.com/stakwork/sphinx-tribes/db"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AddAndUpdateBudget provides a mock function with given fields: invoice
func (_m *Database) AddAndUpdateBudget(invoice db.InvoiceList) db.PaymentHistory {
	ret := _m.Called(invoice)

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(db.InvoiceList) db.PaymentHistory); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// AddBounty provides a mock function with given fields: b
func (_m *Database) AddBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddBudgetHistory provides a mock function with given fields: budget
func (_m *Database) AddBudgetHistory(budget db.BudgetHistory) db.BudgetHistory {
	ret := _m.Called(budget)

	var r0 db.BudgetHistory
	if rf, ok := ret.Get(0).(func(db.BudgetHistory) db.BudgetHistory); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BudgetHistory)
	}

	return r0
}

// AddInvoice provides a mock function with given fields: invoice
func (_m *Database) AddInvoice(invoice db.InvoiceList) db.InvoiceList {
	ret := _m.Called(invoice)

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(db.InvoiceList) db.InvoiceList); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// AddPaymentHistory provides a mock function with given fields: payment
func (_m *Database) AddPaymentHistory(payment db.PaymentHistory) db.PaymentHistory {
	ret := _m.Called(payment)

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(db.PaymentHistory) db.PaymentHistory); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// AddUserInvoiceData provides a mock function with given fields: userData
func (_m *Database) AddUserInvoiceData(userData db.UserInvoiceData) db.UserInvoiceData {
	ret := _m.Called(userData)

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(db.UserInvoiceData) db.UserInvoiceData); ok {
		r0 = rf(userData)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// ChangeOrganizationDeleteStatus provides a mock function with given fields: org_uuid, status
func (_m *Database) ChangeOrganizationDeleteStatus(org_uuid string, status bool) db.Organization {
	ret := _m.Called(org_uuid, status)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(string, bool) db.Organization); ok {
		r0 = rf(org_uuid, status)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	return r0
}

// CountBounties provides a mock function with given fields:
func (_m *Database) CountBounties() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// CountDevelopers provides a mock function with given fields:
func (_m *Database) CountDevelopers() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CreateChannel provides a mock function with given fields: c
func (_m *Database) CreateChannel(c db.Channel) (db.Channel, error) {
	ret := _m.Called(c)

	var r0 db.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Channel) (db.Channel, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(db.Channel) db.Channel); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	if rf, ok := ret.Get(1).(func(db.Channel) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectionCode provides a mock function with given fields: c
func (_m *Database) CreateConnectionCode(c db.ConnectionCodes) (db.ConnectionCodes, error) {
	ret := _m.Called(c)

	var r0 db.ConnectionCodes
	var r1 error
	if rf, ok := ret.Get(0).(func(db.ConnectionCodes) (db.ConnectionCodes, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(db.ConnectionCodes) db.ConnectionCodes); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(db.ConnectionCodes)
	}

	if rf, ok := ret.Get(1).(func(db.ConnectionCodes) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLeaderBoard provides a mock function with given fields: uuid, leaderboards
func (_m *Database) CreateLeaderBoard(uuid string, leaderboards []db.LeaderBoard) ([]db.LeaderBoard, error) {
	ret := _m.Called(uuid, leaderboards)

	var r0 []db.LeaderBoard
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) ([]db.LeaderBoard, error)); ok {
		return rf(uuid, leaderboards)
	}
	if rf, ok := ret.Get(0).(func(string, []db.LeaderBoard) []db.LeaderBoard); ok {
		r0 = rf(uuid, leaderboards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []db.LeaderBoard) error); ok {
		r1 = rf(uuid, leaderboards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLnUser provides a mock function with given fields: lnKey
func (_m *Database) CreateLnUser(lnKey string) (db.Person, error) {
	ret := _m.Called(lnKey)

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (db.Person, error)); ok {
		return rf(lnKey)
	}
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lnKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrEditBot provides a mock function with given fields: b
func (_m *Database) CreateOrEditBot(b db.Bot) (db.Bot, error) {
	ret := _m.Called(b)

	var r0 db.Bot
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bot) (db.Bot, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bot) db.Bot); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	if rf, ok := ret.Get(1).(func(db.Bot) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrEditBounty provides a mock function with given fields: b
func (_m *Database) CreateOrEditBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrEditOrganization provides a mock function with given fields: m
func (_m *Database) CreateOrEditOrganization(m db.Organization) (db.Organization, error) {
	ret := _m.Called(m)

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Organization) (db.Organization, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Organization) db.Organization); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(db.Organization) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrEditPerson provides a mock function with given fields: m
func (_m *Database) CreateOrEditPerson(m db.Person) (db.Person, error) {
	ret := _m.Called(m)

	var r0 db.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Person) (db.Person, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Person) db.Person); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	if rf, ok := ret.Get(1).(func(db.Person) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrEditTribe provides a mock function with given fields: m
func (_m *Database) CreateOrEditTribe(m db.Tribe) (db.Tribe, error) {
	ret := _m.Called(m)

	var r0 db.Tribe
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Tribe) (db.Tribe, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(db.Tribe) db.Tribe); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	if rf, ok := ret.Get(1).(func(db.Tribe) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationBudget provides a mock function with given fields: budget
func (_m *Database) CreateOrganizationBudget(budget db.BountyBudget) db.BountyBudget {
	ret := _m.Called(budget)

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(db.BountyBudget) db.BountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// CreateOrganizationUser provides a mock function with given fields: orgUser
func (_m *Database) CreateOrganizationUser(orgUser db.OrganizationUsers) db.OrganizationUsers {
	ret := _m.Called(orgUser)

	var r0 db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(db.OrganizationUsers) db.OrganizationUsers); ok {
		r0 = rf(orgUser)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsers)
	}

	return r0
}

// CreateUserRoles provides a mock function with given fields: roles, uuid, pubkey
func (_m *Database) CreateUserRoles(roles []db.UserRoles, uuid string, pubkey string) []db.UserRoles {
	ret := _m.Called(roles, uuid, pubkey)

	var r0 []db.UserRoles
	if rf, ok := ret.Get(0).(func([]db.UserRoles, string, string) []db.UserRoles); ok {
		r0 = rf(roles, uuid, pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UserRoles)
		}
	}

	return r0
}

// DeleteBounty provides a mock function with given fields: pubkey, created
func (_m *Database) DeleteBounty(pubkey string, created string) (db.Bounty, error) {
	ret := _m.Called(pubkey, created)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (db.Bounty, error)); ok {
		return rf(pubkey, created)
	}
	if rf, ok := ret.Get(0).(func(string, string) db.Bounty); ok {
		r0 = rf(pubkey, created)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pubkey, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationUser provides a mock function with given fields: orgUser, org
func (_m *Database) DeleteOrganizationUser(orgUser db.OrganizationUsersData, org string) db.OrganizationUsersData {
	ret := _m.Called(orgUser, org)

	var r0 db.OrganizationUsersData
	if rf, ok := ret.Get(0).(func(db.OrganizationUsersData, string) db.OrganizationUsersData); ok {
		r0 = rf(orgUser, org)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsersData)
	}

	return r0
}

// DeleteUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) DeleteUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// GetAllBounties provides a mock function with given fields: r
func (_m *Database) GetAllBounties(r *http.Request) []db.Bounty {
	ret := _m.Called(r)

	var r0 []db.Bounty
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bounty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	return r0
}

// GetAllTribes provides a mock function with given fields:
func (_m *Database) GetAllTribes() []db.Tribe {
	ret := _m.Called()

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func() []db.Tribe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// GetAllTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetAllTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// GetAssignedBounties provides a mock function with given fields: pubkey
func (_m *Database) GetAssignedBounties(pubkey string) ([]db.Bounty, error) {
	ret := _m.Called(pubkey)

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(pubkey)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pubkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBot provides a mock function with given fields: uuid
func (_m *Database) GetBot(uuid string) db.Bot {
	ret := _m.Called(uuid)

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// GetBotByUniqueName provides a mock function with given fields: un
func (_m *Database) GetBotByUniqueName(un string) db.Bot {
	ret := _m.Called(un)

	var r0 db.Bot
	if rf, ok := ret.Get(0).(func(string) db.Bot); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Bot)
	}

	return r0
}

// GetBotsByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetBotsByOwner(pubkey string) []db.Bot {
	ret := _m.Called(pubkey)

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(string) []db.Bot); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// GetBountiesCount provides a mock function with given fields: r
func (_m *Database) GetBountiesCount(r *http.Request) int64 {
	ret := _m.Called(r)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetBountiesLeaderboard provides a mock function with given fields:
func (_m *Database) GetBountiesLeaderboard() []db.LeaderData {
	ret := _m.Called()

	var r0 []db.LeaderData
	if rf, ok := ret.Get(0).(func() []db.LeaderData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderData)
		}
	}

	return r0
}

// GetBounty provides a mock function with given fields: id
func (_m *Database) GetBounty(id uint) db.Bounty {
	ret := _m.Called(id)

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(uint) db.Bounty); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// GetBountyByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyByCreated(created uint) (db.Bounty, error) {
	ret := _m.Called(created)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (db.Bounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(uint) db.Bounty); ok {
		r0 = rf(created)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBountyById provides a mock function with given fields: id
func (_m *Database) GetBountyById(id string) ([]db.Bounty, error) {
	ret := _m.Called(id)

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBountyDataByCreated provides a mock function with given fields: created
func (_m *Database) GetBountyDataByCreated(created string) ([]db.Bounty, error) {
	ret := _m.Called(created)

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(created)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBountyIndexById provides a mock function with given fields: id
func (_m *Database) GetBountyIndexById(id string) int64 {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetBountyRoles provides a mock function with given fields:
func (_m *Database) GetBountyRoles() []db.BountyRoles {
	ret := _m.Called()

	var r0 []db.BountyRoles
	if rf, ok := ret.Get(0).(func() []db.BountyRoles); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BountyRoles)
		}
	}

	return r0
}

// GetChannel provides a mock function with given fields: id
func (_m *Database) GetChannel(id uint) db.Channel {
	ret := _m.Called(id)

	var r0 db.Channel
	if rf, ok := ret.Get(0).(func(uint) db.Channel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Channel)
	}

	return r0
}

// GetChannelsByTribe provides a mock function with given fields: tribe_uuid
func (_m *Database) GetChannelsByTribe(tribe_uuid string) []db.Channel {
	ret := _m.Called(tribe_uuid)

	var r0 []db.Channel
	if rf, ok := ret.Get(0).(func(string) []db.Channel); ok {
		r0 = rf(tribe_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Channel)
		}
	}

	return r0
}

// GetConnectionCode provides a mock function with given fields:
func (_m *Database) GetConnectionCode() db.ConnectionCodesShort {
	ret := _m.Called()

	var r0 db.ConnectionCodesShort
	if rf, ok := ret.Get(0).(func() db.ConnectionCodesShort); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.ConnectionCodesShort)
	}

	return r0
}

// GetCreatedBounties provides a mock function with given fields: pubkey
func (_m *Database) GetCreatedBounties(pubkey string) ([]db.Bounty, error) {
	ret := _m.Called(pubkey)

	var r0 []db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.Bounty, error)); ok {
		return rf(pubkey)
	}
	if rf, ok := ret.Get(0).(func(string) []db.Bounty); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pubkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilterStatusCount provides a mock function with given fields:
func (_m *Database) GetFilterStatusCount() db.FilterStattuCount {
	ret := _m.Called()

	var r0 db.FilterStattuCount
	if rf, ok := ret.Get(0).(func() db.FilterStattuCount); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.FilterStattuCount)
	}

	return r0
}

// GetFirstTribeByFeedURL provides a mock function with given fields: feedURL
func (_m *Database) GetFirstTribeByFeedURL(feedURL string) db.Tribe {
	ret := _m.Called(feedURL)

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(feedURL)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// GetInvoice provides a mock function with given fields: payment_request
func (_m *Database) GetInvoice(payment_request string) db.InvoiceList {
	ret := _m.Called(payment_request)

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) db.InvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// GetLeaderBoard provides a mock function with given fields: uuid
func (_m *Database) GetLeaderBoard(uuid string) []db.LeaderBoard {
	ret := _m.Called(uuid)

	var r0 []db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string) []db.LeaderBoard); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LeaderBoard)
		}
	}

	return r0
}

// GetLeaderBoardByUuidAndAlias provides a mock function with given fields: uuid, alias
func (_m *Database) GetLeaderBoardByUuidAndAlias(uuid string, alias string) db.LeaderBoard {
	ret := _m.Called(uuid, alias)

	var r0 db.LeaderBoard
	if rf, ok := ret.Get(0).(func(string, string) db.LeaderBoard); ok {
		r0 = rf(uuid, alias)
	} else {
		r0 = ret.Get(0).(db.LeaderBoard)
	}

	return r0
}

// GetListedBots provides a mock function with given fields: r
func (_m *Database) GetListedBots(r *http.Request) []db.Bot {
	ret := _m.Called(r)

	var r0 []db.Bot
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Bot); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bot)
		}
	}

	return r0
}

// GetListedOffers provides a mock function with given fields: r
func (_m *Database) GetListedOffers(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListedPeople provides a mock function with given fields: r
func (_m *Database) GetListedPeople(r *http.Request) []db.Person {
	ret := _m.Called(r)

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// GetListedPosts provides a mock function with given fields: r
func (_m *Database) GetListedPosts(r *http.Request) ([]db.PeopleExtra, error) {
	ret := _m.Called(r)

	var r0 []db.PeopleExtra
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]db.PeopleExtra, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []db.PeopleExtra); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PeopleExtra)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListedTribes provides a mock function with given fields: r
func (_m *Database) GetListedTribes(r *http.Request) []db.Tribe {
	ret := _m.Called(r)

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Tribe); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// GetLnUser provides a mock function with given fields: lnKey
func (_m *Database) GetLnUser(lnKey string) int64 {
	ret := _m.Called(lnKey)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(lnKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetOpenGithubIssues provides a mock function with given fields: r
func (_m *Database) GetOpenGithubIssues(r *http.Request) (int64, error) {
	ret := _m.Called(r)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationBounties provides a mock function with given fields: r, org_uuid
func (_m *Database) GetOrganizationBounties(r *http.Request, org_uuid string) []db.Bounty {
	ret := _m.Called(r, org_uuid)

	var r0 []db.Bounty
	if rf, ok := ret.Get(0).(func(*http.Request, string) []db.Bounty); ok {
		r0 = rf(r, org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Bounty)
		}
	}

	return r0
}

// GetOrganizationBountyCount provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationBountyCount(uuid string) int64 {
	ret := _m.Called(uuid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetOrganizationBudget provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationBudget(org_uuid string) db.BountyBudget {
	ret := _m.Called(org_uuid)

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(string) db.BountyBudget); ok {
		r0 = rf(org_uuid)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// GetOrganizationBudgetHistory provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationBudgetHistory(org_uuid string) []db.BudgetHistoryData {
	ret := _m.Called(org_uuid)

	var r0 []db.BudgetHistoryData
	if rf, ok := ret.Get(0).(func(string) []db.BudgetHistoryData); ok {
		r0 = rf(org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BudgetHistoryData)
		}
	}

	return r0
}

// GetOrganizationByName provides a mock function with given fields: name
func (_m *Database) GetOrganizationByName(name string) db.Organization {
	ret := _m.Called(name)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(string) db.Organization); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	return r0
}

// GetOrganizationInvoices provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationInvoices(org_uuid string) []db.InvoiceList {
	ret := _m.Called(org_uuid)

	var r0 []db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) []db.InvoiceList); ok {
		r0 = rf(org_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.InvoiceList)
		}
	}

	return r0
}

// GetOrganizationInvoicesCount provides a mock function with given fields: org_uuid
func (_m *Database) GetOrganizationInvoicesCount(org_uuid string) int64 {
	ret := _m.Called(org_uuid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(org_uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetOrganizationUser provides a mock function with given fields: pubkey, org_uuid
func (_m *Database) GetOrganizationUser(pubkey string, org_uuid string) db.OrganizationUsers {
	ret := _m.Called(pubkey, org_uuid)

	var r0 db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(string, string) db.OrganizationUsers); ok {
		r0 = rf(pubkey, org_uuid)
	} else {
		r0 = ret.Get(0).(db.OrganizationUsers)
	}

	return r0
}

// GetOrganizationUsers provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationUsers(uuid string) ([]db.OrganizationUsersData, error) {
	ret := _m.Called(uuid)

	var r0 []db.OrganizationUsersData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]db.OrganizationUsersData, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) []db.OrganizationUsersData); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.OrganizationUsersData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationUsersCount provides a mock function with given fields: uuid
func (_m *Database) GetOrganizationUsersCount(uuid string) int64 {
	ret := _m.Called(uuid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetOrganizations provides a mock function with given fields: r
func (_m *Database) GetOrganizations(r *http.Request) []db.Organization {
	ret := _m.Called(r)

	var r0 []db.Organization
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Organization); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	return r0
}

// GetOrganizationsCount provides a mock function with given fields:
func (_m *Database) GetOrganizationsCount() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetPaymentHistory provides a mock function with given fields: org_uuid, r
func (_m *Database) GetPaymentHistory(org_uuid string, r *http.Request) []db.PaymentHistory {
	ret := _m.Called(org_uuid, r)

	var r0 []db.PaymentHistory
	if rf, ok := ret.Get(0).(func(string, *http.Request) []db.PaymentHistory); ok {
		r0 = rf(org_uuid, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.PaymentHistory)
		}
	}

	return r0
}

// GetPaymentHistoryByCreated provides a mock function with given fields: created, org_uuid
func (_m *Database) GetPaymentHistoryByCreated(created *time.Time, org_uuid string) db.PaymentHistory {
	ret := _m.Called(created, org_uuid)

	var r0 db.PaymentHistory
	if rf, ok := ret.Get(0).(func(*time.Time, string) db.PaymentHistory); ok {
		r0 = rf(created, org_uuid)
	} else {
		r0 = ret.Get(0).(db.PaymentHistory)
	}

	return r0
}

// GetPeopleBySearch provides a mock function with given fields: r
func (_m *Database) GetPeopleBySearch(r *http.Request) []db.Person {
	ret := _m.Called(r)

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(*http.Request) []db.Person); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// GetPeopleListShort provides a mock function with given fields: count
func (_m *Database) GetPeopleListShort(count uint32) *[]db.PersonInShort {
	ret := _m.Called(count)

	var r0 *[]db.PersonInShort
	if rf, ok := ret.Get(0).(func(uint32) *[]db.PersonInShort); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.PersonInShort)
		}
	}

	return r0
}

// GetPerson provides a mock function with given fields: id
func (_m *Database) GetPerson(id uint) db.Person {
	ret := _m.Called(id)

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(uint) db.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// GetPersonByGithubName provides a mock function with given fields: github_name
func (_m *Database) GetPersonByGithubName(github_name string) db.Person {
	ret := _m.Called(github_name)

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(github_name)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// GetPersonByUniqueName provides a mock function with given fields: un
func (_m *Database) GetPersonByUniqueName(un string) db.Person {
	ret := _m.Called(un)

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// GetPersonByUuid provides a mock function with given fields: uuid
func (_m *Database) GetPersonByUuid(uuid string) db.Person {
	ret := _m.Called(uuid)

	var r0 db.Person
	if rf, ok := ret.Get(0).(func(string) db.Person); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Person)
	}

	return r0
}

// GetTribe provides a mock function with given fields: uuid
func (_m *Database) GetTribe(uuid string) db.Tribe {
	ret := _m.Called(uuid)

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// GetTribeByIdAndPubkey provides a mock function with given fields: uuid, pubkey
func (_m *Database) GetTribeByIdAndPubkey(uuid string, pubkey string) db.Tribe {
	ret := _m.Called(uuid, pubkey)

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string, string) db.Tribe); ok {
		r0 = rf(uuid, pubkey)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// GetTribeByUniqueName provides a mock function with given fields: un
func (_m *Database) GetTribeByUniqueName(un string) db.Tribe {
	ret := _m.Called(un)

	var r0 db.Tribe
	if rf, ok := ret.Get(0).(func(string) db.Tribe); ok {
		r0 = rf(un)
	} else {
		r0 = ret.Get(0).(db.Tribe)
	}

	return r0
}

// GetTribesByAppUrl provides a mock function with given fields: aurl
func (_m *Database) GetTribesByAppUrl(aurl string) []db.Tribe {
	ret := _m.Called(aurl)

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(aurl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// GetTribesByOwner provides a mock function with given fields: pubkey
func (_m *Database) GetTribesByOwner(pubkey string) []db.Tribe {
	ret := _m.Called(pubkey)

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// GetTribesTotal provides a mock function with given fields:
func (_m *Database) GetTribesTotal() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetUnconfirmedGithub provides a mock function with given fields:
func (_m *Database) GetUnconfirmedGithub() []db.Person {
	ret := _m.Called()

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// GetUnconfirmedTwitter provides a mock function with given fields:
func (_m *Database) GetUnconfirmedTwitter() []db.Person {
	ret := _m.Called()

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func() []db.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// GetUserAssignedOrganizations provides a mock function with given fields: pubkey
func (_m *Database) GetUserAssignedOrganizations(pubkey string) []db.OrganizationUsers {
	ret := _m.Called(pubkey)

	var r0 []db.OrganizationUsers
	if rf, ok := ret.Get(0).(func(string) []db.OrganizationUsers); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.OrganizationUsers)
		}
	}

	return r0
}

// GetUserBountiesCount provides a mock function with given fields: personKey, tabType
func (_m *Database) GetUserBountiesCount(personKey string, tabType string) int64 {
	ret := _m.Called(personKey, tabType)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(personKey, tabType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetUserCreatedOrganizations provides a mock function with given fields: pubkey
func (_m *Database) GetUserCreatedOrganizations(pubkey string) []db.Organization {
	ret := _m.Called(pubkey)

	var r0 []db.Organization
	if rf, ok := ret.Get(0).(func(string) []db.Organization); ok {
		r0 = rf(pubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	return r0
}

// GetUserInvoiceData provides a mock function with given fields: payment_request
func (_m *Database) GetUserInvoiceData(payment_request string) db.UserInvoiceData {
	ret := _m.Called(payment_request)

	var r0 db.UserInvoiceData
	if rf, ok := ret.Get(0).(func(string) db.UserInvoiceData); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.UserInvoiceData)
	}

	return r0
}

// SearchBots provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchBots(s string, limit int, offset int) []db.BotRes {
	ret := _m.Called(s, limit, offset)

	var r0 []db.BotRes
	if rf, ok := ret.Get(0).(func(string, int, int) []db.BotRes); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.BotRes)
		}
	}

	return r0
}

// SearchPeople provides a mock function with given fields: s, limit, offset
func (_m *Database) SearchPeople(s string, limit int, offset int) []db.Person {
	ret := _m.Called(s, limit, offset)

	var r0 []db.Person
	if rf, ok := ret.Get(0).(func(string, int, int) []db.Person); ok {
		r0 = rf(s, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Person)
		}
	}

	return r0
}

// SearchTribes provides a mock function with given fields: s
func (_m *Database) SearchTribes(s string) []db.Tribe {
	ret := _m.Called(s)

	var r0 []db.Tribe
	if rf, ok := ret.Get(0).(func(string) []db.Tribe); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Tribe)
		}
	}

	return r0
}

// UpdateBot provides a mock function with given fields: uuid, u
func (_m *Database) UpdateBot(uuid string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, u)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateBounty provides a mock function with given fields: b
func (_m *Database) UpdateBounty(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBountyBoolColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyBoolColumn(b db.Bounty, column string) db.Bounty {
	ret := _m.Called(b, column)

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(db.Bounty, string) db.Bounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// UpdateBountyNullColumn provides a mock function with given fields: b, column
func (_m *Database) UpdateBountyNullColumn(b db.Bounty, column string) db.Bounty {
	ret := _m.Called(b, column)

	var r0 db.Bounty
	if rf, ok := ret.Get(0).(func(db.Bounty, string) db.Bounty); ok {
		r0 = rf(b, column)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	return r0
}

// UpdateBountyPayment provides a mock function with given fields: b
func (_m *Database) UpdateBountyPayment(b db.Bounty) (db.Bounty, error) {
	ret := _m.Called(b)

	var r0 db.Bounty
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Bounty) (db.Bounty, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(db.Bounty) db.Bounty); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(db.Bounty)
	}

	if rf, ok := ret.Get(1).(func(db.Bounty) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: id, u
func (_m *Database) UpdateChannel(id uint, u map[string]interface{}) bool {
	ret := _m.Called(id, u)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) bool); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateGithubConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateGithubConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// UpdateGithubIssues provides a mock function with given fields: id, issues
func (_m *Database) UpdateGithubIssues(id uint, issues map[string]interface{}) {
	_m.Called(id, issues)
}

// UpdateInvoice provides a mock function with given fields: payment_request
func (_m *Database) UpdateInvoice(payment_request string) db.InvoiceList {
	ret := _m.Called(payment_request)

	var r0 db.InvoiceList
	if rf, ok := ret.Get(0).(func(string) db.InvoiceList); ok {
		r0 = rf(payment_request)
	} else {
		r0 = ret.Get(0).(db.InvoiceList)
	}

	return r0
}

// UpdateLeaderBoard provides a mock function with given fields: uuid, alias, u
func (_m *Database) UpdateLeaderBoard(uuid string, alias string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, alias, u)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, alias, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateOrganizationBudget provides a mock function with given fields: budget
func (_m *Database) UpdateOrganizationBudget(budget db.BountyBudget) db.BountyBudget {
	ret := _m.Called(budget)

	var r0 db.BountyBudget
	if rf, ok := ret.Get(0).(func(db.BountyBudget) db.BountyBudget); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(db.BountyBudget)
	}

	return r0
}

// UpdateTribe provides a mock function with given fields: uuid, u
func (_m *Database) UpdateTribe(uuid string, u map[string]interface{}) bool {
	ret := _m.Called(uuid, u)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) bool); ok {
		r0 = rf(uuid, u)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateTribeUniqueName provides a mock function with given fields: uuid, u
func (_m *Database) UpdateTribeUniqueName(uuid string, u string) {
	_m.Called(uuid, u)
}

// UpdateTwitterConfirmed provides a mock function with given fields: id, confirmed
func (_m *Database) UpdateTwitterConfirmed(id uint, confirmed bool) {
	_m.Called(id, confirmed)
}

// UserHasManageBountyRoles provides a mock function with given fields: pubKeyFromAuth, uuid
func (_m *Database) UserHasManageBountyRoles(pubKeyFromAuth string, uuid string) bool {
	ret := _m.Called(pubKeyFromAuth, uuid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pubKeyFromAuth, uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WithdrawBudget provides a mock function with given fields: sender_pubkey, org_uuid, amount
func (_m *Database) WithdrawBudget(sender_pubkey string, org_uuid string, amount uint) {
	_m.Called(sender_pubkey, org_uuid, amount)
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
